"use strict";Object.defineProperty(exports,"__esModule",{value:true});exports.httpAdapter=void 0;var https=_interopRequireWildcard(require("https"));var http=_interopRequireWildcard(require("http"));var follwoRedirects=_interopRequireWildcard(require("follow-redirects"));var zlib=_interopRequireWildcard(require("zlib"));var _buffer=require("buffer");var _utils=_interopRequireDefault(require("../../util/utils"));var _Response=require("../../structures/Response");var _HPromise=require("../../structures/HPromise");function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj}}function _getRequireWildcardCache(nodeInterop){if(typeof WeakMap!=="function")return null;var cacheBabelInterop=new WeakMap;var cacheNodeInterop=new WeakMap;return(_getRequireWildcardCache=function(nodeInterop){return nodeInterop?cacheNodeInterop:cacheBabelInterop})(nodeInterop)}function _interopRequireWildcard(obj,nodeInterop){if(!nodeInterop&&obj&&obj.__esModule){return obj}if(obj===null||typeof obj!=="object"&&typeof obj!=="function"){return{default:obj}}var cache=_getRequireWildcardCache(nodeInterop);if(cache&&cache.has(obj)){return cache.get(obj)}var newObj={};var hasPropertyDescriptor=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var key in obj){if(key!=="default"&&Object.prototype.hasOwnProperty.call(obj,key)){var desc=hasPropertyDescriptor?Object.getOwnPropertyDescriptor(obj,key):null;if(desc&&(desc.get||desc.set)){Object.defineProperty(newObj,key,desc)}else{newObj[key]=obj[key]}}}newObj.default=obj;if(cache){cache.set(obj,newObj)}return newObj}const httpAdapter=(data,methods)=>{let resolves;let rejects;const promise=new _HPromise.HPromise((resolve,reject)=>{resolves=resolve;rejects=reject});const url=new URL(data.url);const isHttps=!!(url.protocol==="https:");const requestOptions={};let request;if(data.maxRedirects===0){request=isHttps?https:http}else{requestOptions.maxRedirects=data.maxRedirects;requestOptions.trackRedirects=data.trackRedirects;request=isHttps?follwoRedirects.https:follwoRedirects.http}const method=data.method.toUpperCase();const body=data.body;const headers=data.headers?_utils.default.stringsToLowerCase(data.headers):{};if(!headers.accept)headers.accept="application/json, text/plain, */*";if(!headers["user-agent"])headers["user-agent"]="hyttpo/nodejs (+https://github.com/Garlic-Team/hyttpo)";if(methods.includes(method)&&method!=="GET")request=request.request;else request=request[method.toLowerCase()];const agent=isHttps?data.httpsAgent||data.agent:data.httpAgent||data.agent;requestOptions.path=`${url.pathname}${url.search}`;requestOptions.method=method;requestOptions.headers=headers;requestOptions.hostname=url.hostname;requestOptions.port=url.port;requestOptions.agent=agent;if(data.maxBodyLength>-1)requestOptions.maxBodyLength=data.maxBodyLength;const req=request(requestOptions,res=>{const lastRequest=req.req||req;let stream=res;if(res.statusCode!==204&&lastRequest.method!=="HEAD"){switch(res.headers["content-encoding"]){case"gzip":case"compress":case"deflate":stream=stream.pipe(zlib.createUnzip());data.responseType="stream";delete res.headers["content-encoding"];break;}}const response=new _Response.Response({request:res,statusCode:res.statusCode,statusMessage:res.statusMessage,headers:res.headers});if(data.trackRedirects){response.responseUrl=res.responseUrl;response.redirects=res.redirects}if(data.responseType==="stream"){stream.on("data",chunk=>{promise.emit("data",chunk);data.onData?.(chunk)});stream.on("end",()=>{promise.emit("end",stream);data.onEnd?.(stream)});response.data=stream;if(response.ok)resolves(response);else rejects(response)}else{let buffer=[];stream.on("data",chunk=>{promise.emit("data",chunk);data.onData?.(chunk);buffer.push(chunk);if(data.maxContentLength>-1&&Buffer.concat(buffer).length>data.maxContentLength){stream.destroy();data.onError?.(`maxContentLength (${data.maxContentLength}) exceeded`);promise.emit("error",`maxContentLength (${data.maxContentLength}) exceeded`);rejects(new Error(`maxContentLength (${data.maxContentLength}) exceeded`))}});stream.on("error",error=>{if(req.aborted)return;data.onError?.(error);promise.emit("error",error);rejects(error)});stream.on("end",()=>{buffer=Buffer.concat(buffer);if(!["arraybuffer","buffer"].includes(data.responseType)){buffer=_utils.default.responseRefactor(buffer,data.responseEncoding);if(data.responseType==="blob")buffer=new _buffer.Blob([_utils.default.toString(buffer)])}else if(data.responseType==="arraybuffer"){buffer=_utils.default.toArrayBuffer(buffer)}response.data=buffer;data.onEnd?.({buffer,response});promise.emit("end",{buffer,response});if(response.ok)resolves(response);else rejects(response)})}});req.on("error",error=>{if(req.aborted&&error.code!=="ERR_FR_TOO_MANY_REDIRECTS")return;data.onError?.(error);promise.emit("error",error);rejects(error)});req.on("response",message=>{promise.emit("response",new _Response.Response(message));data.onResponse?.(new _Response.Response(message))});if(body&&method!=="GET"){if(_utils.default.isObject(body)&&(body?.constructor?.name==="FormData"||_utils.default.isStream(body))){body.pipe(req)}else{req.write(body);req.end()}}return promise};exports.httpAdapter=httpAdapter;