"use strict";Object.defineProperty(exports,"__esModule",{value:true});exports.MongoDBProvider=void 0;var _jsLogger=_interopRequireDefault(require("js-logger"));var _mongodb=require("mongodb");var _Provider=require("../lib/structures/Provider");function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj}}class MongoDBProvider extends _Provider.Provider{constructor(uri,dbName){super();this.uri=uri;this.dbName=dbName;this.type="mongodb";this.client=new _mongodb.MongoClient(this.uri);this.db=null}async init(){await this.client.connect().catch(error=>{_jsLogger.default.error(typeof error.code!=="undefined"?error.code:"",error.message);if(error.stack)_jsLogger.default.trace(error.stack)}).then(()=>{_jsLogger.default.debug("MongoDB initializated!");this.db=this.client.db(this?.dbName);this.emit("connected",this.client)});return}async insert(collectionName,document){const collection=this.db.collection(collectionName);const data=await collection.insertOne(document);return data}async get(collectionName,filter,options){const collection=this.db?.collection(collectionName);const data=options?await collection?.findOne(filter,options):await collection?.findOne(filter);return data}async getMany(collectionName,filter,options){const collection=this.db?.collection(collectionName);const data=options?await collection?.find(filter,options):await collection?.find(filter);return data}async update(collectionName,filter,set,options){const collection=this.db?.collection(collectionName);const data=options?await collection?.updateOne(filter,set,options):await collection?.updateOne(filter,set);return data}async delete(collectionName,filter){const collection=this.db?.collection(collectionName);const data=await collection?.deleteOne(filter);return data}}exports.MongoDBProvider=MongoDBProvider;