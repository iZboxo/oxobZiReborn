import { AutoDeferType, GClient } from '../GClient';
import { Argument, ArgumentType, ChannelType } from './Argument';
import { CommandContext } from './contexts/CommandContext';
import { AutocompleteContext } from './contexts/AutocompleteContext';
export declare enum CommandType {
    'MESSAGE' = 0,
    'SLASH' = 1,
    'CONTEXT_USER' = 2,
    'CONTEXT_MESSAGE' = 3
}
export interface CommandArgumentChoice {
    name: string;
    value: string;
}
export interface CommandArgument {
    name: string;
    description: string;
    type: ArgumentType;
    required?: boolean;
    choices?: Array<CommandArgumentChoice>;
    options?: Array<CommandArgument | Argument>;
    channelTypes?: Array<ChannelType | keyof typeof ChannelType>;
    run?: (ctx: AutocompleteContext) => any;
}
export declare type CommandInhibitor = (ctx: CommandContext) => boolean | any;
export declare type CommandInhibitors = Array<{
    run: CommandInhibitor;
} | CommandInhibitor>;
export interface CommandOptions {
    name: string;
    type: Array<CommandType | keyof typeof CommandType>;
    description?: string;
    arguments?: Array<CommandArgument | Argument>;
    inhibitors?: CommandInhibitors;
    guildId?: string;
    cooldown?: string;
    autoDefer?: AutoDeferType | keyof typeof AutoDeferType;
    fileName?: string;
    run?: (ctx: CommandContext) => any;
    onError?: (ctx: CommandContext, error: any) => any;
}
export declare class Command {
    client: GClient;
    readonly name: string;
    readonly description?: string;
    readonly type: Array<CommandType | keyof typeof CommandType>;
    readonly arguments?: Array<CommandArgument | Argument>;
    readonly inhibitors: CommandInhibitors;
    guildId?: string;
    private static defaults?;
    readonly cooldown?: string;
    readonly fileName?: string;
    readonly run: (ctx: CommandContext) => any;
    readonly onError?: (ctx: CommandContext, error: any) => any;
    owner?: string;
    reloading: boolean;
    readonly autoDefer?: AutoDeferType | keyof typeof AutoDeferType;
    constructor(options: CommandOptions);
    initialize(client: GClient): void;
    unregister(): Command;
    inhibit(ctx: CommandContext): Promise<boolean>;
    reload(): Promise<Command>;
    toAPICommand(): Array<Record<string, any>>;
    static setDefaults(defaults: Partial<CommandOptions>): void;
    private validate;
}
