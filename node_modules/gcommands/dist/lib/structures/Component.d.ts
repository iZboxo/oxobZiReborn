import { AutoDeferType, GClient } from '../GClient';
import { ComponentContext } from './contexts/ComponentContext';
export declare enum ComponentType {
    'BUTTON' = 1,
    'SELECT_MENU' = 2
}
export declare type ComponentInhibitor = (ctx: ComponentContext) => boolean | any;
export declare type ComponentInhibitors = Array<{
    run: ComponentInhibitor;
} | ComponentInhibitor>;
export interface ComponentOptions {
    name: string;
    type: Array<ComponentType | keyof typeof ComponentType>;
    inhibitors?: ComponentInhibitors;
    guildId?: string;
    cooldown?: string;
    autoDefer?: AutoDeferType | keyof typeof AutoDeferType;
    fileName?: string;
    run?: (interaction: ComponentContext) => any;
    onError?: (interaction: ComponentContext, error: any) => any;
}
export declare class Component {
    client: GClient;
    readonly name: string;
    readonly type: Array<ComponentType | keyof typeof ComponentType>;
    readonly inhibitors: ComponentInhibitors;
    guildId?: string;
    private static defaults;
    readonly cooldown?: string;
    readonly fileName?: string;
    readonly run: (ctx: ComponentContext) => any;
    readonly onError?: (ctx: ComponentContext, error: any) => any;
    owner?: string;
    reloading: boolean;
    readonly autoDefer?: AutoDeferType | keyof typeof AutoDeferType;
    constructor(options: ComponentOptions);
    initialize(client: GClient): void;
    unregister(): void;
    inhibit(ctx: ComponentContext): Promise<boolean>;
    reload(): Promise<Component>;
    static setDefaults(defaults: Partial<ComponentOptions>): void;
    private validate;
}
