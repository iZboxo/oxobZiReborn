import { Command, CommandArgument, CommandArgumentChoice } from './Command';
import { AutocompleteContext } from './contexts/AutocompleteContext';
export declare enum ArgumentType {
    'SUB_COMMAND' = 1,
    'SUB_COMMAND_GROUP' = 2,
    'STRING' = 3,
    'INTEGER' = 4,
    'BOOLEAN' = 5,
    'USER' = 6,
    'CHANNEL' = 7,
    'ROLE' = 8,
    'MENTIONABLE' = 9,
    'NUMBER' = 10
}
export declare enum ChannelType {
    'GUILD_TEXT' = 0,
    'GUILD_VOICE' = 2,
    'GUILD_CATEGORY' = 4,
    'GUILD_STORE' = 6,
    'GUILD_NEWS_THREAD' = 10,
    'GUILD_PUBLIC_THREAD' = 11,
    'GUILD_PRIVATE_THREAD' = 12,
    'GUILD_STAGE_VOICE' = 13
}
export interface ArgumentOptions {
    name: string;
    description: string;
    type: ArgumentType | keyof typeof ArgumentType;
    required?: boolean;
    choices?: Array<CommandArgumentChoice>;
    options?: Array<CommandArgument | Argument>;
    channelTypes?: Array<ChannelType | keyof typeof ChannelType>;
    run?: (ctx: AutocompleteContext) => any;
}
export declare class Argument {
    readonly name: string;
    readonly description: string;
    readonly type: ArgumentType | keyof typeof ArgumentType;
    readonly required: boolean;
    readonly choices?: Array<CommandArgumentChoice>;
    readonly options?: Array<CommandArgument | Argument>;
    readonly channelTypes?: Array<ChannelType | keyof typeof ChannelType>;
    run?: (ctx: AutocompleteContext) => any;
    constructor(options: ArgumentOptions);
    static toAPIArgument(argument: Argument | CommandArgument): Record<string, any>;
    static validate(argument: Argument | CommandArgument, command: Command): boolean | void;
}
