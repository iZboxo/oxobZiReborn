"use strict";Object.defineProperty(exports,"__esModule",{value:true});exports.Plugins=exports.PluginManager=void 0;var _discord=require("discord.js");var _Plugin=require("../structures/Plugin");var _pluginFinder=require("../loaders/pluginFinder");var _jsLogger=_interopRequireDefault(require("js-logger"));function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj}}class PluginManager extends _discord.Collection{currentlyLoading=null;register(plugin){if(plugin instanceof _Plugin.Plugin){if(this.has(plugin.name))_jsLogger.default.warn("Overwriting plugin",plugin.name);if(!_Plugin.Plugin.validate(plugin))return;this.set(plugin.name,plugin);_jsLogger.default.debug("Registered plugin",plugin.name)}else _jsLogger.default.warn("Plugin must be a instance of plugin");return this}async search(basedir){await(0,_pluginFinder.pluginFinder)(basedir)}async initiate(client){this.client=client;for await(const plugin of this.values()){this.currentlyLoading=plugin.name;await Promise.resolve(plugin.run(client)).catch(error=>{_jsLogger.default.error(typeof error.code!=="undefined"?error.code:"",error.message);if(error.stack)_jsLogger.default.trace(error.stack)}).then(()=>{this.currentlyLoading=null})}}}exports.PluginManager=PluginManager;const Plugins=new PluginManager;exports.Plugins=Plugins;