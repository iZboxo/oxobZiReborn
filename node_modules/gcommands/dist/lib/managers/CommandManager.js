"use strict";Object.defineProperty(exports,"__esModule",{value:true});exports.Commands=exports.CommandManager=void 0;var _discord=require("discord.js");var _Command=require("../structures/Command");var _jsLogger=_interopRequireDefault(require("js-logger"));var _PluginManager=require("./PluginManager");function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj}}class CommandManager extends _discord.Collection{register(command){if(command instanceof _Command.Command){if(this.has(command.name)&&!this.get(command.name)?.reloading)_jsLogger.default.warn("Overriding command",command.name);if(this.client)command.initialize(this.client);if(_PluginManager.Plugins.currentlyLoading)command.owner=_PluginManager.Plugins.currentlyLoading;this.set(command.name,command);_jsLogger.default.debug("Registered command",command.name,command.owner?`(by plugin ${command.owner})`:"")}else _jsLogger.default.warn("Command must be a instance of Command");return this}unregister(commandName){const command=this.get(commandName);if(command){this.delete(commandName);_jsLogger.default.debug("Unregistered command",command.name)}return command}async initiate(client){this.client=client;this.forEach(command=>command.initialize(client))}}exports.CommandManager=CommandManager;const Commands=new CommandManager;exports.Commands=Commands;