"use strict";Object.defineProperty(exports,"__esModule",{value:true});exports.sync=sync;var _rest=require("@discordjs/rest");var _v=require("discord-api-types/v9");var _jsLogger=_interopRequireDefault(require("js-logger"));var _nodeTimers=require("node:timers");var _CommandManager=require("../managers/CommandManager");function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj}}async function _sync(client,commands,guildId){const rest=new _rest.REST({version:"9"}).setToken(client.token);await rest.put(guildId?_v.Routes.applicationGuildCommands(client.user.id,guildId):_v.Routes.applicationCommands(client.user.id),{body:commands.flatMap(command=>command.toAPICommand())}).catch(error=>{if(error.status===429)(0,_nodeTimers.setTimeout)(()=>_sync(client,commands,guildId),error.data.retry_after*1000);else{_jsLogger.default.error(typeof error.code!=="undefined"?error.code:"",error.message);if(error.stack)_jsLogger.default.trace(error.stack)}})}async function sync(client){if(_CommandManager.Commands.size===0)return;const[guild,global]=_CommandManager.Commands.partition(command=>typeof command.guildId==="string");const guildIds=new Set(guild.map(c=>c.guildId));for await(const guildId of guildIds){const commands=guild.filter(item=>item.guildId===guildId);await _sync(client,[...commands.values()],guildId)}await _sync(client,[...global.values()])}