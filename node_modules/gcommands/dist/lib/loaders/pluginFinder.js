"use strict";Object.defineProperty(exports,"__esModule",{value:true});exports.loadPluginFolder=loadPluginFolder;exports.pluginFinder=pluginFinder;var fs=_interopRequireWildcard(require("fs"));var path=_interopRequireWildcard(require("path"));function _getRequireWildcardCache(nodeInterop){if(typeof WeakMap!=="function")return null;var cacheBabelInterop=new WeakMap;var cacheNodeInterop=new WeakMap;return(_getRequireWildcardCache=function(nodeInterop){return nodeInterop?cacheNodeInterop:cacheBabelInterop})(nodeInterop)}function _interopRequireWildcard(obj,nodeInterop){if(!nodeInterop&&obj&&obj.__esModule){return obj}if(obj===null||typeof obj!=="object"&&typeof obj!=="function"){return{default:obj}}var cache=_getRequireWildcardCache(nodeInterop);if(cache&&cache.has(obj)){return cache.get(obj)}var newObj={};var hasPropertyDescriptor=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var key in obj){if(key!=="default"&&Object.prototype.hasOwnProperty.call(obj,key)){var desc=hasPropertyDescriptor?Object.getOwnPropertyDescriptor(obj,key):null;if(desc&&(desc.get||desc.set)){Object.defineProperty(newObj,key,desc)}else{newObj[key]=obj[key]}}}newObj.default=obj;if(cache){cache.set(obj,newObj)}return newObj}async function loadPluginFolder(basedir,folder){if(folder.isDirectory()){if(fs.existsSync(path.join(basedir,folder.name,"index.js"))){await Promise.resolve(`${path.join(basedir,folder.name,"index.js")}`).then(s=>_interopRequireWildcard(require(s)))}else if(fs.existsSync(path.join(basedir,folder.name,"register.js"))){await Promise.resolve(`${path.join(basedir,folder.name,"register.js")}`).then(s=>_interopRequireWildcard(require(s)))}else if(fs.existsSync(path.join(basedir,folder.name,"dist","index.js"))){await Promise.resolve(`${path.join(basedir,folder.name,"dist","index.js")}`).then(s=>_interopRequireWildcard(require(s)))}else if(fs.existsSync(path.join(basedir,folder.name,"dist","register.js"))){await Promise.resolve(`${path.join(basedir,folder.name,"dist","register.js")}`).then(s=>_interopRequireWildcard(require(s)))}}}async function pluginFinder(basedir){if(fs.existsSync(basedir)){if(fs.existsSync(path.join(basedir,"plugins"))){for await(const folder of fs.readdirSync(path.join(basedir,"plugins"),{withFileTypes:true})){await loadPluginFolder(path.join(basedir,"plugins"),folder)}}if(fs.existsSync(path.join(basedir,"src","plugins"))){for await(const folder of fs.readdirSync(path.join(basedir,"src","plugins"),{withFileTypes:true})){await loadPluginFolder(path.join(basedir,"src","plugins"),folder)}}if(fs.existsSync(path.join(basedir,"node_modules"))){for await(const folder of fs.readdirSync(path.join(basedir,"node_modules"),{withFileTypes:true})){if(!folder.name.includes("gcommands-plugin-"))continue;await loadPluginFolder(path.join(basedir,"node_modules"),folder)}}if(fs.existsSync(path.join(basedir,"node_modules","@gcommands"))){for await(const folder of fs.readdirSync(path.join(basedir,"node_modules","@gcommands"),{withFileTypes:true})){if(!folder.name.includes("plugin-"))continue;await loadPluginFolder(path.join(basedir,"node_modules","@gcommands"),folder)}}}}