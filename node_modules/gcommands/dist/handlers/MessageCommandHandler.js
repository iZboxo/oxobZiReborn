"use strict";Object.defineProperty(exports,"__esModule",{value:true});exports.MessageCommandHandler=MessageCommandHandler;var _discord=require("discord.js");var _CommandContext=require("../lib/structures/contexts/CommandContext");var _Command=require("../lib/structures/Command");var _Argument=require("../lib/structures/Argument");var _CommandManager=require("../lib/managers/CommandManager");var _HandlerManager=require("../lib/managers/HandlerManager");var _jsLogger=_interopRequireDefault(require("js-logger"));function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj}}const cooldowns=new _discord.Collection;async function MessageCommandHandler(message,commandName,args){const client=message.client;const command=_CommandManager.Commands.get(commandName);if(!command&&client.options?.unknownCommandMessage)return message.reply({content:client.responses.NOT_FOUND});if(!command.type.includes(_Command.CommandType.MESSAGE))return;if(command.cooldown){const cooldown=_HandlerManager.Handlers.cooldownHandler(message.author.id,command,cooldowns);if(cooldown)return message.reply({content:client.responses.COOLDOWN.replace("{time}",String(cooldown)).replace("{name}",command.name+" command")})}args=args.map((arg,i)=>new Object({name:command.arguments[i].name,type:command.arguments[i].type,choices:command.arguments[i].choices,options:[],value:arg}));if(args[0]?.type===(_Argument.ArgumentType.SUB_COMMAND_GROUP||_Argument.ArgumentType.SUB_COMMAND))args[0].options=args.splice(1);if(args[0]?.type===_Argument.ArgumentType.SUB_COMMAND_GROUP&&args[0]?.options[0]?.type===_Argument.ArgumentType.SUB_COMMAND)args[0].options[0].options=args[0].options.splice(1);let replied;const ctx=new _CommandContext.CommandContext(client,{message:message,channel:message.channel,createdAt:message.createdAt,createdTimestamp:message.createdTimestamp,guild:message.guild,guildId:message.guildId,user:message.author,member:message.member,memberPermissions:message.member.permissions,command:command,arguments:new _discord.CommandInteractionOptionResolver(client,args,{}),deferReply:()=>{return},deleteReply:async()=>{await replied.delete()},editReply:async opt=>{return await replied.edit(opt)},fetchReply:async()=>{return replied},followUp:message.reply.bind(message),reply:message.reply.bind(message)});if(!(await command.inhibit(ctx)))return;await Promise.resolve(command.run(ctx)).catch(async error=>{_jsLogger.default.error(typeof error.code!=="undefined"?error.code:"",error.message);if(error.stack)_jsLogger.default.trace(error.stack);const errorReply=()=>ctx.safeReply({content:client.responses.ERROR,components:[]});if(typeof command.onError==="function")await Promise.resolve(command.onError(ctx,error)).catch(async()=>await errorReply());else await errorReply()}).then(()=>{_jsLogger.default.debug(`Successfully ran command (${command.name}) for ${message.author.username}`)})}